//////////////////////////// Socket /////////////////////
// CLIENT SIDE

package socket;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.*;
public class GreetingClient {
	public static void main(String [] args){
		String serverName = args[0];
		int port = Integer.parseInt(args[1]);
		try{
			System.out.println("Conecting to "+ serverName+" on port"+ port);
			Socket client = new Socket (serverName,port);
			System.out.println("just connected to "+client.getRemoteSocketAddress());
			OutputStream outToServer = client.getOutputStream();
			DataOutputStream out = new DataOutputStream(outToServer);
			out.writeUTF("Hello from"+ client.getLocalSocketAddress());
			InputStream inFromServer = client.getInputStream();
			DataInputStream in =  new DataInputStream(inFromServer);
			System.out.println("Server says "+in.readUTF());
			client.close();
			
		}catch(Exception e){
			e.printStackTrace();
		}
	
	}
}
 



//SERVER SIDE


package socket;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;

public class GreetingServer extends Thread{
	private ServerSocket serverSocket;
	
	public GreetingServer (int port)throws IOException{
		serverSocket = new ServerSocket(port);
		serverSocket.setSoTimeout(1000000);
	}
	
	public void run(){
		while(true){
			try{
				System.out.println("Wating for client on port "+serverSocket.getLocalPort()+".....");
				Socket server = serverSocket.accept();
				
				System.out.println("Just connected to "+server.getRemoteSocketAddress());
				DataInputStream in = new DataInputStream(server.getInputStream());
				System.out.println(in.readUTF());
				DataOutputStream out = new DataOutputStream(server.getOutputStream());
				out.writeUTF("thanku for connecting to "+server.getLocalSocketAddress()+"\nGoodBye!");
				server.close();
			}catch(SocketTimeoutException a){
				System.out.println("Socket time out");
				break;
			}
			catch(IOException e){
				e.printStackTrace();
				break;
			}
		}
	}

	public static void main(String[] args) {
		int port = Integer.parseInt(args[0]);
		try{
			Thread t = new GreetingServer(port);
			t.start();
		}catch(IOException e)
		{
			e.printStackTrace();

		}
	}
	
}


//////////////////////////////////// servlet program ////////////////////////////////////

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


@WebServlet("/MyServlet")
public class MyServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

    /**
     * Default constructor. 
     */
    public MyServlet() {
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */	
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		out.print("<html><body>");
		out.print("<h1>hello world</h1>");
		out.print("</body></html>");	
		}
}
	



////////////// implement applet set color and draw an oval /////////////////////

import java.applet.Applet;
import java.awt.Graphics;
import java.awt.Color;

public class MyApplet extends Applet {
    public void paint(Graphics g) {
        g.drawString("Hello, World!", 20, 20);
	g.setcolor(Color.red); 
	g.fillOval(20,20,60,60); 	

    }
}



/////////////////////// Design a GUI in Java Swings:///////////////////////////

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class MySwingGUI {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Swing GUI Example");
        JPanel panel = new JPanel();
        JButton button = new JButton("Click Me");
        
        panel.add(button);
        frame.add(panel);
        
        frame.setSize(300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}

//////////////////////////// Swing chat frame ////////////////////////

//////////////(replace MyApp with your class name )///////////////////////

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.UIManager;

// import javafx.scene.control.ToggleButton;

public class MyApp {
public static void main(String[] args)
{
	try
	{
		UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		
	}
	catch (Exception e)
	{
		e.printStackTrace();
	}
	
	JFrame frame = new JFrame("Chat Frame");
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	frame.setSize(600,600);
	
	JMenuBar menuBar = new JMenuBar();
	JMenu m1= new JMenu("FILE");
	JMenu m2= new JMenu("HELP");
	menuBar.add(m1);
	menuBar.add(m2);
	JMenuItem m11= new JMenuItem("Open");
	JMenuItem m12= new JMenuItem("Close");
	m1.add(m11);
	m1.add(m12);
	
	JTextArea ta = new JTextArea();
	JScrollPane scroll = new JScrollPane(ta);
	scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
	
	
	JPanel panel = new JPanel();
	JLabel lable = new JLabel("Enter Text");
	JTextField textField = new JTextField(10);
	JButton sendButton = new JButton("Send");
	JButton resetButton = new JButton("Reset");
	
	panel.add(lable);
	panel.add(textField);
	panel.add(sendButton);
	panel.add(resetButton);
	
	
	JPanel buttonPanel = new JPanel();
	ButtonGroup buttonGroup = new ButtonGroup();
	JRadioButton secYearButton = new JRadioButton("II Year");
	JRadioButton thirdYearButton = new JRadioButton("III Year");
	JRadioButton fourthYearButton = new JRadioButton("IV Year");
	
	buttonGroup.add(secYearButton);
	buttonGroup.add(thirdYearButton);
	buttonGroup.add(fourthYearButton);
	buttonPanel.add(secYearButton);
	buttonPanel.add(thirdYearButton);
	buttonPanel.add(fourthYearButton);
	buttonPanel.add(panel);
	
	
	JPanel cbPanel = new JPanel();
	JCheckBox cb1 = new JCheckBox("C++");
	cb1.setBounds(100, 150, 50, 50);
	JCheckBox cb2 = new JCheckBox("Java");
	cb1.setBounds(100, 150, 50, 50);
	cbPanel.add(cb1);
	cbPanel.add(cb2);
	
	JToggleButton toggleButton = new JToggleButton("TextAreaSet");
	ItemListener itemListener = new ItemListener() 
	{
		
		@Override
		public void itemStateChanged(ItemEvent event)
		{
			// TODO Auto-generated method stub
			int state = event.getStateChange();
			if(state==ItemEvent.SELECTED)
			{
				ta.setEnabled(false);
			}
			else 
			{
				ta.setEnabled(true);
			}
			
		}
	};
	toggleButton.addItemListener(itemListener);
	cbPanel.add(toggleButton);
	
	
	frame.getContentPane().add(BorderLayout.PAGE_START,menuBar);
	frame.getContentPane().add(BorderLayout.BEFORE_LINE_BEGINS,cbPanel);
	frame.getContentPane().add(BorderLayout.CENTER,scroll);
	frame.getContentPane().add(BorderLayout.SOUTH,buttonPanel);
	frame.setVisible(true);
}
}

///////////////////////////////// JDBC //////////////////////////////////////

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
public class Digitalbook {
public static void main(String[] args)
{
	try(
			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/ebookshop","root","root");
			Statement stmt = conn.createStatement();			
			)
	{
		String strSelect = "Select title ,price,qty from books";
		System.out.println("the SQL statement is : " + strSelect + "\n");
		ResultSet rset = stmt.executeQuery(strSelect);
		
		System.out.println("the recodr select are:");
		int rowCount = 0;
		while(rset.next()) {
			String title = rset.getString("title");
			double price  = rset.getDouble("price");
			int qty = rset.getInt("qty");
			System.out.println(title + "," + price +  "," +qty );
			++rowCount;
			}
			System.out.println("total number of records = "+ rowCount);
	}
	catch(SQLException ex)
	{
		ex.printStackTrace();
			
			
			
		}
		
		
		
	}
}












/////////////////////////////calulator using applet and swings ////////////////////////////

//////////////(replace CalculatorApp with your class name )///////////////////////

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CalculatorApp extends JFrame implements ActionListener {

    private JTextField textField;
    private JButton[] numberButtons;
    private JButton addButton, subtractButton, multiplyButton, divideButton, equalsButton, clearButton;

    private double firstNumber, secondNumber, result;
    private String operator;

    public CalculatorApp() {
        setTitle("Calculator");
        setSize(400, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        textField = new JTextField();
        textField.setFont(new Font("Arial", Font.PLAIN, 24));
        textField.setHorizontalAlignment(JTextField.RIGHT);
        add(textField, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(4, 4));

        numberButtons = new JButton[10];
        for (int i = 0; i < 10; i++) {
            numberButtons[i] = new JButton(String.valueOf(i));
            numberButtons[i].setFont(new Font("Arial", Font.PLAIN, 24));
            numberButtons[i].addActionListener(this);
            buttonPanel.add(numberButtons[i]);
        }

        addButton = new JButton("+");
        subtractButton = new JButton("-");
        multiplyButton = new JButton("*");
        divideButton = new JButton("/");
        equalsButton = new JButton("=");
        clearButton = new JButton("C");

        JButton[] operationButtons = {addButton, subtractButton, multiplyButton, divideButton, equalsButton, clearButton};
        for (JButton button : operationButtons) {
            button.setFont(new Font("Arial", Font.PLAIN, 24));
            button.addActionListener(this);
            buttonPanel.add(button);
        }

        add(buttonPanel, BorderLayout.CENTER);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton source = (JButton) e.getSource();
        String buttonText = source.getText();

        if (buttonText.matches("[0-9]")) {
            textField.setText(textField.getText() + buttonText);
        } else if (buttonText.equals("C")) {
            textField.setText("");
            firstNumber = 0;
            secondNumber = 0;
            operator = null;
        } else if (buttonText.matches("[+\\-*/=]")) {
            if (!textField.getText().isEmpty()) {
                if (firstNumber == 0) {
                    firstNumber = Double.parseDouble(textField.getText());
                    operator = buttonText;
                    textField.setText("");
                } else if (secondNumber == 0) {
                    secondNumber = Double.parseDouble(textField.getText());
                    switch (operator) {
                        case "+":
                            result = firstNumber + secondNumber;
                            break;
                        case "-":
                            result = firstNumber - secondNumber;
                            break;
                        case "*":
                            result = firstNumber * secondNumber;
                            break;
                        case "/":
                            if (secondNumber != 0) {
                                result = firstNumber / secondNumber;
                            } else {
                                textField.setText("Error");
                                return;
                            }
                            break;
                    }
                    firstNumber = result;
                    textField.setText(String.valueOf(result));
                    if (!buttonText.equals("=")) {
                        operator = buttonText;
                    } else {
                        operator = null;
                    }
                    secondNumber = 0;
                }
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                CalculatorApp calculator = new CalculatorApp();
                calculator.setVisible(true);
            }
        });
    }
}


///////////////////////////////a Program to implement the SQL –login ID commands using JDBC///////////////////////

package javaapplication5;
import java.sql.*;
import java.awt.*;
import javax.swing.*;
public class NewJFrame extends javax.swing.JFrame {
 public NewJFrame() {
 initComponents();
 }
 private void initComponents() {
 jTextField1 = new javax.swing.JTextField();
 jTextField2 = new javax.swing.JTextField();
 jButton1 = new javax.swing.JButton();
 jLabel1 = new javax.swing.JLabel();
 jLabel2 = new javax.swing.JLabel();
 setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
 jButton1.setText("Login");
 jButton1.addActionListener(new java.awt.event.ActionListener() {
 public void actionPerformed(java.awt.event.ActionEvent evt) {
 jButton1ActionPerformed(evt);
 }
 });
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
 try
 {
 // Connection conn;
 Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
 String url = "Jdbc:Odbc:g2";
 Connection conn = DriverManager.getConnection(url);
 ResultSet rs;
 Statement stmt=conn.createStatement();
 rs=stmt.executeQuery("select * from mytab");

 while(rs.next())
 {
if(((jTextField1.getText()).equals(rs.getString(1)))&& ((jTextField2.getText()).equals(rs.getString(2)))){
 JOptionPane.showMessageDialog(this, "login successfull");
 System.exit(0);

}}
 JOptionPane.showMessageDialog(this, "login unsuccessfull");
 System.exit(0);
 conn.close();
 }
 catch (Exception e) {
 System.err.println("Got an exception! ");
 System.err.println(e.getMessage());
 }
 }
}



/////////////////////////////rmi server and client /////////////////////////////////

///RmiServer

////Addition.java



import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class Addition extends UnicastRemoteObject 
implements AdditionInterface{
	public Addition() throws RemoteException { }
	
	public int add(int a, int b) throws RemoteException {
		int result =a+b;
		return result;
	}

}

////AdditionInterface.java



import java.rmi.Remote;
import java.rmi.RemoteException;

public interface AdditionInterface extends Remote {
	
	public int add(int a, int b) throws RemoteException;
	

}



////AdditionServer.java



import java.rmi.Naming;

public class AdditionServer {
public static void  main(String[] args) {
	
	try{
		Addition Hello = new Addition();
		Naming.rebind("rmi://localhost/ABC", Hello);
		System.out.println("Addition server is ready");
	}catch (Exception e)
	{
		System.out.println("Addition Server failed");
	}
	
}
}



/////Rmi client

//////Addition.java

////AdditionClient.java

import java.rmi.Naming;

public class AdditionClent {
	public static void main (String[] args) 
	{
		AdditionInterface hello;
		try{
			hello = (AdditionInterface)Naming.lookup("rmi://localhost/ABC");
			int result = hello.add(9,10);
			System.out.println("result is :" + result);
		}catch(Exception e){
			System.out.println("HelloClient exception:" + e);
		}
	}

}

/////////////////////////////////////program to implement servlet in java //////////
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/HelloServlet")
public class HelloServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html");

        PrintWriter out = response.getWriter();
        out.println("<html><body>");
        out.println("<h2>Hello, this is a simple servlet!</h2>");
        out.println("</body></html>");
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doGet(request, response);
    }
}

////////////////////////////// Basic JSP program//////////////////////////////////
<%@ page language="java" contentType="text/html; charset=ISO88591"
pageEncoding="ISO88591"%>
<%@page language="java" %>
<!DOCTYPE html PUBLIC "//
W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta httpequiv="
ContentType"
content="text/html; charset=ISO88591">
<title>this is jsp1</title>
</head>
<body bgcolor="red">
<font size="10">
<%
String name="roseindia.net";
out.println("hello" + name +"!");
%>
</font>
</body>
</html> 


///////////////////serialization & deserialzation/////////////////////////////

//employee.java//
import java.io.Serializable;

public class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private int employeeId;

    // Constructors, getters, and setters

    public Employee(String name, int employeeId) {
        this.name = name;
        this.employeeId = employeeId;
    }

    public String getName() {
        return name;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    @Override
    public String toString() {
        return "Employee [name=" + name + ", employeeId=" + employeeId + "]";
    }
}


//SerializeDemo.java//
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

public class SerializeDemo {
    public static void main(String[] args) {
        serializeObjectToFile();
    }

    private static void serializeObjectToFile() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("employee.ser"))) {
            Employee employee = new Employee("John Doe", 12345);
            oos.writeObject(employee);
            System.out.println("Serialization completed. Object written to employee.ser");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


//DeserializeDemo.java://

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class DeserializeDemo {
    public static void main(String[] args) {
        deserializeObjectFromFile();
    }

    private static void deserializeObjectFromFile() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("employee.ser"))) {
            Employee employee = (Employee) ois.readObject();
            System.out.println("Deserialization completed. Object read from employee.ser");
            System.out.println("Deserialized Employee: " + employee);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}













